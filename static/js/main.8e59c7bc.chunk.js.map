{"version":3,"sources":["components/ResultRow/index.js","utils/API.js","components/TextField/index.js","components/Table/index.js","components/Menu/index.js","App.js","serviceWorker.js","index.js"],"names":["ResultRow","props","TableRow","TableCell","component","scope","src","thumbnail","alt","align","fullName","phone","email","axios","get","useStyles","makeStyles","theme","root","margin","spacing","width","BasicTextFields","classes","className","noValidate","autoComplete","TextField","id","value","search","name","onChange","handleInputChange","label","variant","UsersTable","event","target","setState","console","log","state","users","searchBy","API","then","res","cleanData","data","results","map","user","picture","first","last","catch","err","this","sort","a","b","TableContainer","Paper","Table","table","aria-label","TableHead","onClick","sortAlphaName","sortNum","sortAlphaEmail","TableBody","filter","toLowerCase","includes","i","key","Component","withStyles","createStyles","minWidth","myButton","background","border","borderRadius","boxShadow","color","height","padding","marginBottom","fontSize","title","subHead","marginTop","FadeMenu","Button","fullWidth","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8e59c7bc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\n\r\n//using props to populate the rows of the table\r\nfunction ResultRow(props) {\r\n  return (\r\n    <TableRow>\r\n      <TableCell component=\"th\" scope=\"row\">\r\n        <img src={props.thumbnail} alt=\"thumbnail\"></img>\r\n      </TableCell>\r\n      <TableCell align=\"right\">{props.fullName}</TableCell>\r\n      <TableCell align=\"right\">{props.phone}</TableCell>\r\n      <TableCell align=\"right\">{props.email}</TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n\r\nexport default ResultRow;\r\n","import axios from \"axios\";\r\n\r\nconst BASEURL = \"https://randomuser.me/api/?results=25&nat=us\";\r\n\r\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\r\nexport default{\r\n  getUsers: function () {\r\n    return axios.get(BASEURL);\r\n  },\r\n};","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"40ch\",\r\n    },\r\n  },\r\n}));\r\n//text field using porps for the value and onChange that connect to the table\r\nexport default function BasicTextFields(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <form className={classes.root} noValidate autoComplete=\"off\">\r\n      <TextField id=\"outlined-basic\" value={props.search} name=\"search\" onChange={props.handleInputChange} label=\"Search by Name, Phone, or Email\" variant=\"outlined\" />\r\n    </form>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { createStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ResultRow from \"../ResultRow\";\r\nimport API from \"../../utils/API\";\r\nimport TextField from \"../TextField\";\r\n\r\nconst styles = () =>\r\n  createStyles({\r\n    table: {\r\n      minWidth: \"85%\",\r\n    },\r\n  });\r\n\r\nclass UsersTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      users: [],\r\n      search: \"\",\r\n      searchBy: \"fullName\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    API.getUsers()\r\n      .then((res) => {\r\n        //cleaning the data to make a new key 'full name' combining first and last\r\n        const cleanData = res.data.results.map((user) => ({\r\n          ...user,\r\n          thumbnail: user.picture.thumbnail,\r\n          fullName: user.name.first + \" \" + user.name.last,\r\n          phone: user.phone,\r\n          email: user.email,\r\n        }));\r\n        console.log(cleanData);\r\n        this.setState({ users: cleanData }, () => console.log(this.state));\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    // Getting the value and name of the input\r\n    let value = event.target.value;\r\n    const name = event.target.name;\r\n\r\n    // Updating the input's state\r\n    this.setState(\r\n      {\r\n        [name]: value,\r\n      },\r\n      () => console.log(this.state)\r\n    );\r\n  };\r\n\r\n\r\n  //sorting full names alphabetically\r\n  sortAlphaName() {\r\n    this.setState({\r\n      users: this.state.users.sort((a, b) =>\r\n        a.fullName > b.fullName ? 1 : -1\r\n      ),\r\n    });\r\n  }\r\n  //sorting email alphabetically\r\n  sortAlphaEmail() {\r\n    this.setState({\r\n      users: this.state.users.sort((a, b) => (a.email > b.email ? 1 : -1)),\r\n    });\r\n  }\r\n  //sorting by first number of phone# ascending\r\n  sortNum() {\r\n    this.setState({\r\n      users: this.state.users.sort((a, b) => (a.phone > b.phone ? 1 : -1)),\r\n    });\r\n  }\r\n  //rendering the table\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <TableContainer component={Paper}>\r\n        <TextField\r\n          search={this.state.search}\r\n          handleInputChange={this.handleInputChange}\r\n        />\r\n        <Table className={classes.table} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Picture</TableCell>\r\n              <TableCell\r\n                align=\"center\"\r\n                onClick={() => {\r\n                  this.sortAlphaName();\r\n                }}\r\n              >\r\n                Full Name\r\n              </TableCell>\r\n              <TableCell\r\n                align=\"center\"\r\n                onClick={() => {\r\n                  this.sortNum();\r\n                }}\r\n              >\r\n                Phone\r\n              </TableCell>\r\n              <TableCell\r\n                align=\"center\"\r\n                onClick={() => {\r\n                  this.sortAlphaEmail();\r\n                }}\r\n              >\r\n                E-Mail\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {/* filtering through users to search by full name */}\r\n            {this.state.users\r\n              .filter(\r\n                (user) =>\r\n                  user.fullName\r\n                    .toLowerCase()\r\n                    .includes(this.state.search.toLowerCase()) ||\r\n                  user.email\r\n                    .toLowerCase()\r\n                    .includes(this.state.search.toLowerCase()) ||\r\n                  user.phone\r\n                    .toLowerCase()\r\n                    .includes(this.state.search.toLowerCase())\r\n              )\r\n              .map((user, i) => (\r\n                <ResultRow\r\n                  key={i}\r\n                  thumbnail={user.picture.thumbnail}\r\n                  fullName={user.fullName}\r\n                  phone={user.phone}\r\n                  email={user.email}\r\n                />\r\n              ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(UsersTable);\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  myButton: {\r\n    background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\r\n    border: 0,\r\n    borderRadius: 3,\r\n    boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\r\n    color: \"white\",\r\n    height: 200,\r\n    padding: \"0 30px\",\r\n    marginBottom: \"20px\",\r\n    fontSize: \"25px\",\r\n  },\r\n  title: {\r\n    margin: \"10px\",\r\n  },\r\n  subHead: {\r\n    marginTop: \"10px\",\r\n  }\r\n});\r\n\r\nexport default function FadeMenu() {\r\n    const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Button className={classes.myButton} fullWidth=\"true\">\r\n        <h1 className=\"title\">Employee Directory</h1>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Table from \"./components/Table\";\r\nimport Menu from \"./components/Menu\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Menu />\r\n      <Container maxWidth=\"md\">\r\n        {/* <TextField /> */}\r\n        <Table />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}